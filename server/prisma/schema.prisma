// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model employee {
  id            Int             @id @default(autoincrement())
  firstName     String
  middleName    String
  lastName      String
  email         String          @unique
  phone         String
  position      String
  unit          Unit            @relation(fields: [unitId], references: [id])
  unitId        Int
  role          Role            @relation(fields: [roleId], references: [id])
  roleId        Int
  attendance    Attendance[]
  createdAt     DateTime        @default(now())
  faceEmbedding faceEmbedding[]
}

model Unit {
  id        Int        @id @default(autoincrement())
  name      String
  employees employee[]
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  employees employee[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employee   employee  @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  checkInAm  DateTime?
  checkOutAm DateTime?
  checkInPm  DateTime?
  checkOutPm DateTime?
  status     String // Present, Absent, Late, etc.
}

model faceEmbedding {
  id         Int      @id @default(autoincrement())
  embedding  Float[]
  employee   employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SystemAdmin {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  username String
  role     String[] @default(["Admin"])
}
